from typing import (IO, Any, Callable, ContextManager, Dict, Iterator, List,
                    Optional, TypeVar, Union, overload)

from typing_extensions import Literal

T = TypeVar('T')
D = TypeVar('D')

# 基本的なUI関数
def write(*args: Any, unsafe_allow_html: bool = False) -> None: ...
def title(body: Any, anchor: Optional[str] = None) -> None: ...
def header(body: Any, anchor: Optional[str] = None) -> None: ...
def subheader(body: Any, anchor: Optional[str] = None) -> None: ...
def markdown(body: str, unsafe_allow_html: bool = False) -> None: ...
def caption(body: str) -> None: ...
def code(body: str, language: str = "python") -> None: ...
def text(body: str) -> None: ...
def latex(body: str) -> None: ...

# データ表示関数
def dataframe(data: Any, width: Optional[int] = None, height: Optional[int] = None) -> None: ...
def table(data: Any) -> None: ...
def json(body: Any) -> None: ...

# メディア表示関数
def image(image: Any, caption: Optional[str] = None, width: Optional[int] = None, use_column_width: Optional[Union[bool, str]] = None, clamp: bool = False, channels: str = "RGB", output_format: str = "auto") -> None: ...
def audio(data: Union[str, bytes, IO[bytes]], format: Optional[str] = None, start_time: int = 0) -> None: ...
def video(data: Union[str, bytes, IO[bytes]], format: Optional[str] = None, start_time: int = 0) -> None: ...

# インタラクティブウィジェット
def button(label: str, key: Optional[str] = None, help: Optional[str] = None, on_click: Optional[Callable[..., Any]] = None, args: Optional[tuple] = None, kwargs: Optional[Dict[str, Any]] = None, type: Literal["primary", "secondary"] = "secondary") -> bool: ...
def form_submit_button(label: str, key: Optional[str] = None, help: Optional[str] = None, on_click: Optional[Callable[..., Any]] = None, args: Optional[tuple] = None, kwargs: Optional[Dict[str, Any]] = None, type: Literal["primary", "secondary"] = "secondary") -> bool: ...
def checkbox(label: str, value: bool = False, key: Optional[str] = None, help: Optional[str] = None, on_change: Optional[Callable[..., Any]] = None, args: Optional[tuple] = None, kwargs: Optional[Dict[str, Any]] = None) -> bool: ...
def radio(label: str, options: List[Any], index: int = 0, format_func: Callable[[Any], Any] = str, key: Optional[str] = None, help: Optional[str] = None, on_change: Optional[Callable[..., Any]] = None, args: Optional[tuple] = None, kwargs: Optional[Dict[str, Any]] = None) -> Any: ...
def selectbox(label: str, options: List[Any], index: int = 0, format_func: Callable[[Any], Any] = str, key: Optional[str] = None, help: Optional[str] = None, on_change: Optional[Callable[..., Any]] = None, args: Optional[tuple] = None, kwargs: Optional[Dict[str, Any]] = None) -> Any: ...
def multiselect(label: str, options: List[Any], default: Optional[List[Any]] = None, format_func: Callable[[Any], Any] = str, key: Optional[str] = None, help: Optional[str] = None, on_change: Optional[Callable[..., Any]] = None, args: Optional[tuple] = None, kwargs: Optional[Dict[str, Any]] = None) -> List[Any]: ...
def slider(label: str, min_value: Optional[Union[int, float]] = None, max_value: Optional[Union[int, float]] = None, value: Optional[Union[int, float, List[Union[int, float]]]] = None, step: Optional[Union[int, float]] = None, format: Optional[str] = None, key: Optional[str] = None, help: Optional[str] = None, on_change: Optional[Callable[..., Any]] = None, args: Optional[tuple] = None, kwargs: Optional[Dict[str, Any]] = None) -> Union[int, float, List[Union[int, float]]]: ...
def select_slider(label: str, options: List[Any], value: Optional[Any] = None, format_func: Callable[[Any], Any] = str, key: Optional[str] = None, help: Optional[str] = None, on_change: Optional[Callable[..., Any]] = None, args: Optional[tuple] = None, kwargs: Optional[Dict[str, Any]] = None) -> Any: ...
def text_input(label: str, value: str = "", max_chars: Optional[int] = None, key: Optional[str] = None, type: str = "default", help: Optional[str] = None, autocomplete: Optional[str] = None, on_change: Optional[Callable[..., Any]] = None, args: Optional[tuple] = None, kwargs: Optional[Dict[str, Any]] = None) -> str: ...
def text_area(label: str, value: str = "", height: Optional[int] = None, max_chars: Optional[int] = None, key: Optional[str] = None, help: Optional[str] = None, on_change: Optional[Callable[..., Any]] = None, args: Optional[tuple] = None, kwargs: Optional[Dict[str, Any]] = None) -> str: ...
def number_input(label: str, min_value: Optional[Union[int, float]] = None, max_value: Optional[Union[int, float]] = None, value: Union[int, float] = 0, step: Optional[Union[int, float]] = None, format: Optional[str] = None, key: Optional[str] = None, help: Optional[str] = None, on_change: Optional[Callable[..., Any]] = None, args: Optional[tuple] = None, kwargs: Optional[Dict[str, Any]] = None) -> Union[int, float]: ...
def date_input(label: str, value: Any = None, min_value: Optional[Any] = None, max_value: Optional[Any] = None, key: Optional[str] = None, help: Optional[str] = None, on_change: Optional[Callable[..., Any]] = None, args: Optional[tuple] = None, kwargs: Optional[Dict[str, Any]] = None) -> Any: ...
def time_input(label: str, value: Any = None, key: Optional[str] = None, help: Optional[str] = None, on_change: Optional[Callable[..., Any]] = None, args: Optional[tuple] = None, kwargs: Optional[Dict[str, Any]] = None) -> Any: ...
def file_uploader(label: str, type: Optional[Union[str, List[str]]] = None, accept_multiple_files: bool = False, key: Optional[str] = None, help: Optional[str] = None, on_change: Optional[Callable[..., Any]] = None, args: Optional[tuple] = None, kwargs: Optional[Dict[str, Any]] = None) -> Union[None, Any, List[Any]]: ...
def color_picker(label: str, value: str = "#000000", key: Optional[str] = None, help: Optional[str] = None, on_change: Optional[Callable[..., Any]] = None, args: Optional[tuple] = None, kwargs: Optional[Dict[str, Any]] = None) -> str: ...

# レイアウト関数
def sidebar(*args: Any, **kwargs: Any) -> Any: ...
def columns(spec: Union[int, List[int], List[float]]) -> List[Any]: ...
def container() -> Any: ...
def expander(label: str, expanded: bool = False) -> Any: ...
def beta_expander(label: str, expanded: bool = False) -> Any: ...
def form(label: str, key: Optional[str] = None, clear_on_submit: bool = False) -> Any: ...

# ステータス機能
def progress(value: float) -> None: ...
def spinner(text: str = "In progress...") -> ContextManager[None]: ...
def balloons() -> None: ...
def error(body: str) -> None: ...
def warning(body: str) -> None: ...
def info(body: str) -> None: ...
def success(body: str) -> None: ...
def exception(e: Exception) -> None: ...

# セッション機能
def get_session_state() -> Dict[str, Any]: ...
def session_state() -> Dict[str, Any]: ...

# キャッシュ機能
def cache(func: Optional[Callable[..., T]] = None, persist: bool = False, allow_output_mutation: bool = False, show_spinner: bool = True, suppress_st_warning: bool = False, hash_funcs: Optional[Dict[Any, Callable[[Any], Any]]] = None) -> Callable[..., T]: ...
def cache_data(func: Optional[Callable[..., T]] = None, ttl: Optional[int] = None, show_spinner: bool = True, hash_funcs: Optional[Dict[Any, Callable[[Any], Any]]] = None) -> Callable[..., T]: ...
def cache_resource(func: Optional[Callable[..., T]] = None, ttl: Optional[int] = None, show_spinner: bool = True, hash_funcs: Optional[Dict[Any, Callable[[Any], Any]]] = None) -> Callable[..., T]: ...

# その他の機能
def set_page_config(page_title: Optional[str] = None, page_icon: Optional[Any] = None, layout: Optional[str] = None, initial_sidebar_state: Optional[str] = None, menu_items: Optional[Dict[str, Any]] = None) -> None: ...
def stop() -> None: ...
def experimental_rerun() -> None: ...
def help(obj: Any) -> None: ...
def metric(label: str, value: Any, delta: Optional[Any] = None, delta_color: str = "normal") -> None: ...
